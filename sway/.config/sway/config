#
### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4

# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l

# Your preferred terminal emulator
set $term termite

# Your preferred application launcher
# Note: it's recommended that you pass the final command to sway
set $menu dmenu_path | dmenu | xargs swaymsg exec

# Your screen lock command
set $lock exec ~/scripts/lockscreen.sh

### Output configuration
#
# Default wallpaper (more resolutions are available in /usr/share/backgrounds/sway/)
# output * bg /usr/share/backgrounds/sway/Sway_Wallpaper_Blue_1920x1080.png fill
#
# Example configuration:
set $laptop eDP-1
set $hdmi HDMI-A-1

output $laptop resolution 1920x1080 position 0,0
output $hdmi resolution 1920x1080 position 1920,0

# You can get the names of your outputs by running: swaymsg -t get_outputs

### Idle configuration
#
# bindswitch lid:toggle swaynag -m "Lid moved"
#
# this will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

### Input configuration

input type:keyboard {
    xkb_layout "de"
    xkb_variant "neo"
}

# input "2:14:SynPS/2_Synaptics_TouchPad" {
input type:touchpad {
    dwt enabled
    tap enabled
    natural_scroll disabled
    middle_emulation enabled
}
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.
#
### Basic config
#
    focus_follows_mouse no
#
### Apperance
#
    font pango:Hack 9
    # font pango: Hack 12,Awesome 10
#
# Borders:
#
    default_border pixel 2
    for_window [class="^.*"] border pixel 2
    default_floating_border normal
    for_window [floating] border normal
    hide_edge_borders smart

### Key bindings
#
# Basics:
#
    # reload the configuration file
    bindsym $mod+Shift+s reload
    # restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
    # bindsym $mod+Shift+r restart
    # exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -b 'Yes, exit sway' 'swaymsg exit'

    # TODO: i3-input replacement
    # bindsym $mod+i exec "i3-input -F '%s'"

    # start a terminal
    bindsym $mod+Return exec $term

    # kill focused window
    bindsym $mod+Shift+q kill

    # lock screen
    bindsym $mod+Escape $lock

    # start your launcher
    bindsym $mod+y exec wofi --show=run # programs in path
    bindsym $mod+d exec wofi --show=drun # applications
    bindsym $mod+space exec ~/scripts/wofi_window_switcher.sh
    # i3-dmenu-desktop --dmenu="rofi -dmenu run"

    # scripts
    bindsym $mod+p exec ~/scripts/screenshot_wayland.sh
    bindsym $mod+c exec ~/scripts/screenshot_wayland.sh "window"
    bindcode $mod+Shift+48 exec ~/scripts/rofi_xkb.sh
    bindsym $mod+Shift+d exec ~/scripts/monitor_layout_wayland.sh

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal
#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # _move_ the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
#
# Workspaces:
#
    # Workspace variable names
    set $WS1 "1"
    set $WS2 "2"
    set $WS3 "3"
    set $WS4 "4"
    set $WS5 "5"
    set $WS6 "6"
    set $WS7 "7"
    set $WS8 "8"
    set $WS9 "9"
    set $WS10 "10"
    # switch to workspace
    bindsym $mod+1 workspace 1
    bindsym $mod+2 workspace 2
    bindsym $mod+3 workspace 3
    bindsym $mod+4 workspace 4
    bindsym $mod+5 workspace 5
    bindsym $mod+6 workspace 6
    bindsym $mod+7 workspace 7
    bindsym $mod+8 workspace 8
    bindsym $mod+9 workspace 9
    bindsym $mod+0 workspace 10
    # move focused container to workspace
    bindsym $mod+Shift+1 move container to workspace 1
    bindsym $mod+Shift+2 move container to workspace 2
    bindsym $mod+Shift+3 move container to workspace 3
    bindsym $mod+Shift+4 move container to workspace 4
    bindsym $mod+Shift+5 move container to workspace 5
    bindsym $mod+Shift+6 move container to workspace 6
    bindsym $mod+Shift+7 move container to workspace 7
    bindsym $mod+Shift+8 move container to workspace 8
    bindsym $mod+Shift+9 move container to workspace 9
    bindsym $mod+Shift+0 move container to workspace 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.
    #
    # Workspace back_and_forth
    #
    bindsym $mod+z workspace back_and_forth
    bindsym $mod+Shift+z move container to workspace back_and_forth
    bindsym $mod+m workspace back_and_forth
    bindsym $mod+Shift+m move container to workspace back_and_forth
    # works nice with neo2 layout
    bindsym $mod+adiaeresis workspace next
    bindsym $mod+odiaeresis workspace back_and_forth
    bindsym $mod+udiaeresis workspace prev
    bindsym $mod+Shift+adiaeresis workspace next_on_output
    bindsym $mod+Shift+udiaeresis workspace prev_on_output
#
# Output:
#
    # default output for workspace
    workspace $WS1 output $laptop
    workspace $WS2 output $laptop
    workspace $WS3 output $laptop
    workspace $WS4 output $laptop
    workspace $WS5 output $laptop
    workspace $WS9 output $hdmi $laptop
    workspace $WS10 output $hdmi $laptop
    # move containers to output
    bindsym $mod+Tab focus output right
    bindsym $mod+Shift+Tab move container to output right; focus output right
    # move the workspace (between outputs)
    bindsym $mod+Ctrl+$down move workspace to output down
    bindsym $mod+Ctrl+$left move workspace to output left
    bindsym $mod+Ctrl+$up move workspace to output up
    bindsym $mod+Ctrl+$right move workspace to output right
#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+s or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+s splith
    bindsym $mod+v splitv

    # Switch the current container between different layout styles
    bindsym $mod+x layout toggle tabbed splith
    bindsym $mod+t layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    # bindsym $mod+space focus mode_toggle

    # move focus to the parent/child container
    bindsym $mod+Shift+p focus parent
    bindsym $mod+Shift+c focus child
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+period move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+period scratchpad show
#
# Mouse controls:
#
    bindsym --release button2 kill
    bindsym --release button4 move scratchpad
    bindsym --release button5 move scratchpad
    bindsym --whole-window $mod+button2 floating toggle
    bindsym --whole-window $mod+button9 move left
    bindsym --whole-window $mod+button8 move right
#
# Multimedia controles:
#
    # Audio controls (volume up, volume down, toggle mute)
    bindsym --locked XF86AudioRaiseVolume exec amixer -q set Master 5%+
    bindsym --locked XF86AudioLowerVolume exec amixer -q set Master 5%-
    bindsym --locked XF86AudioMute exec amixer -q set Master toggle
    # bindsym XF86AudioMute exec pactl set-sink-mute 0 toggle && pkill -SIGRTMIN+10 i3blockeds
    # Media player key bindings (you need playerctl for this to work.)
    bindsym --locked XF86AudioPlay exec playerctl play-pause
    bindsym --locked XF86AudioPause exec playerctl pause
    bindsym --locked XF86AudioNext exec playerctl next
    bindsym --locked XF86AudioPrev exec playerctl previous
    bindsym --locked XF86AudioStop exec playerctl stop
    # repurpus keys on thinktop
    bindsym --locked XF86Tools exec playerctl previous
    bindsym --locked XF86Search exec playerctl play-pause
    bindsym --locked XF86LaunchA exec playerctl next
    bindsym --locked XF86Explorer exec playerctl stop
    # Screen brightness controls (brightness up, brightness down)
    bindsym XF86MonBrightnessUp exec light -A 5
    bindsym XF86MonBrightnessDown exec light -U 5
#
# Resizing containers: (or use mouse)
#
mode "resize" {
    set $size 1 px or 1 ppt
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width $size
    bindsym $down resize grow height $size
    bindsym $up resize shrink height $size
    bindsym $right resize grow width $size

    # ditto, with arrow keys
    bindsym Left resize shrink width $size
    bindsym Down resize grow height $size
    bindsym Up resize shrink height $size
    bindsym Right resize grow width $size

    # return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym $mod+r mode "default"
}
bindsym $mod+r mode "resize"

#
# Status Bar:
#
# Read `man 5 sway-bar` for more information about this section.
# bar {
#     position top

#     # When the status_command prints a new line to stdout, swaybar updates.
#     # The default just shows the current date and time.
#     status_command while date +'%H:%M %Y-%m-%d'; do sleep 15; done

#     colors {
#         statusline #ffffff
#         background #323232
#         inactive_workspace #323232 #323232 #5c5c5c
#     }
# }

# per application settings
#

for_window [app_id="org.keepassxc.KeePassXC"] {
    floating enable
    move scratchpad
    [app_id="org.keepassxc.KeePassXC"] scratchpad show
}
# for_window [class="TelegramDesktop"]  use class for xwayland
for_window [app_id="telegramdesktop"] {
    floating enable
    fullscreen enable
    # move scratchpad
    # resize set 1000 800
    # [app_id="telegramdesktop"] scratchpad show
}
for_window [instance="^Media viewer$" class="TelegramDesktop"] {
    floating disable
    fullscreen enable
}
for_window [instance="^Godot_Engine$" class="Godot"] floating enable
for_window [title="^pdfpc - present" ] {
    border none
    floating enable
}

for_window [instance="element"] {
    floating enable
    resize set width 1200 height 800
    move scratchpad
    [instance="element"] scratchpad show
}

for_window [app_id="blueman-manager"] floating enable
for_window [app_id="pavucontrol"] floating enable

assign [class="Emacs"] 2

for_window [app_id="firefox"] inhibit_idle fullscreen


# Start-up application:
#
exec --no-startup-id udiskie -A -s

# toogle redshift color adjustment
bindsym $mod+Ctrl+r exec pkill -USR1 redshift

#keepassXC autotype
#bindsym $mod+q nop

# start a few common applications in their workspaces
exec i3-msg "workspace $WS1; exec $term"
exec i3-msg 'workspace $WS2; exec emacsclient -c -n'
exec i3-msg 'workspace $WS3; layout tabbed; exec "sleep 1 && firefox"; layout tabbed'

include /etc/sway/config.d/*
exec "systemctl --user import-environment; systemctl --user start sway-session.target"